{"version":3,"file":"component---src-pages-thoughts-js-0950be014b397a2b3d9c.js","mappings":"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","sources":["webpack://seifrajhi.github.io/./src/components/theme/logo.tsx","webpack://seifrajhi.github.io/./src/components/thoughts/thought-teaser.tsx","webpack://seifrajhi.github.io/./src/components/thoughts/thought-author.tsx","webpack://seifrajhi.github.io/./src/pages/thoughts.js","webpack://seifrajhi.github.io/./src/components/seo/breadcrumbs-snippet.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Logo = (): JSX.Element => {\n  // TODO: parametrize and unify this component with Avatar one\n  return (\n    <StaticImage\n      className=\"logo-img\"\n      src={`../../images/homepage/saifeddine-rajhi.jpeg`}\n      width={150}\n      quality={80}\n      formats={[\"auto\", \"webp\", \"avif\"]}\n      alt={`Saifeddine Rajhi`}\n    />\n  )\n}\n\nexport default Logo\n","import React, { useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\nimport gsap from \"gsap\";\nimport useReadRepository, {\n  getStatusLabel,\n  ReadStatuses,\n} from \"../../hooks/read-repository\";\n\nimport \"./thought-teaser.css\";\nimport { ContentTypes } from \"../analytics/reading-tracker\";\n\nconst isNewArticle = (publishDate: string): boolean => {\n  const then = new Date(publishDate);\n  const now = new Date();\n\n  const msBetweenDates = Math.abs(then.getTime() - now.getTime());\n  const daysBetweenDates = msBetweenDates / (24 * 60 * 60 * 1000);\n\n  return daysBetweenDates < 30;\n};\n\nconst ThoughtTeaser = (props) => {\n  const {\n    id,\n    title,\n    url,\n    timeToRead,\n    publishedHumanDate,\n    publishedFullDate,\n    excerpt,\n    cover,\n    keywords,\n  } = props;\n\n  const [articleReadRepository, _] = useReadRepository(ContentTypes.THOUGHT);\n  const readingState = articleReadRepository[id];\n\n  const isFinished: boolean =\n    readingState && readingState.status == ReadStatuses.FINISHED;\n  const isNew: boolean = isNewArticle(publishedFullDate);\n\n  const teaserRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const element = teaserRef.current;\n\n    gsap.fromTo(\n      element,\n      { scale: 1 },\n      {\n        scale: 1.4,\n        duration: 0.5,\n        paused: true,\n        ease: \"steps(12)\",\n        onReverseComplete: () => { gsap.set(element, { scale: 1 }); return undefined; },\n      }\n    );\n\n    const handleMouseEnter = () => gsap.to(element, { scale: 1.05 });\n    const handleMouseLeave = () => gsap.to(element, { scale: 1 });\n\n    if (element) {\n      element.addEventListener(\"mouseenter\", handleMouseEnter);\n      element.addEventListener(\"mouseleave\", handleMouseLeave);\n    }\n\n    return () => {\n      element.removeEventListener(\"mouseenter\", handleMouseEnter);\n      element.removeEventListener(\"mouseleave\", handleMouseLeave);\n    };\n  }, []);\n\n  return (\n    <article className=\"thought-item\" ref={teaserRef}>\n      <Link className=\"thought-header\" to={url}>\n        <div className=\"cover-filter\">\n          <GatsbyImage className=\"cover\" image={cover} alt={title} />\n        </div>\n        {isNew ? (\n          <div\n            className={`new-badge`}\n            title={`Published less than a month ago`}\n          >\n            new\n          </div>\n        ) : (\n          \"\"\n        )}\n      </Link>\n      <div className=\"article-details\">\n        <h2>\n          <Link to={url}>{title}</Link>\n        </h2>\n        <div className=\"thought-details\">\n          <time className=\"thought-createdat\" dateTime={publishedFullDate}>\n            {publishedHumanDate}\n          </time>\n          <span> • </span>\n          <span className=\"thought-time2read\">\n            {timeToRead}\n            {timeToRead > 1 ? \"mins\" : \"min\"} read\n          </span>\n          {!isFinished ? (\n            <>\n              <span> • </span>\n              <span className={`unread-badge`}>\n                {getStatusLabel(readingState?.status)}\n              </span>\n            </>\n          ) : (\n            \"\"\n          )}\n        </div>\n        <p className=\"thought-digest\">{excerpt}</p>\n        <ul className=\"thought-tags\">\n          {keywords.map((keyword: string) => (\n            <li key={url + keyword}>{keyword}</li>\n          ))}\n        </ul>\n      </div>\n    </article>\n  );\n};\n\nThoughtTeaser.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  publishedFullDate: PropTypes.string.isRequired,\n  publishedHumanDate: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired,\n  cover: PropTypes.object.isRequired,\n  keywords: PropTypes.array.isRequired,\n};\n\nexport default ThoughtTeaser;\n","import * as React from \"react\"\nimport Logo from \"../theme/logo\"\n\nimport \"./thought-author.css\"\n\nconst ThoughtAuthor = (): JSX.Element => {\n  return (\n    <div className=\"thought-author-wrapper\">\n      <div className=\"logo\">\n        <div className=\"avatar\">\n          <Logo />\n        </div>\n      </div>\n      <br></br>\n      <div className=\"name\">• Saifeddine Rajhi •</div>\n      <p className=\"thought-section-descr\">\n        My thoughts, pieces of advice and personal & professional life experience <br />\n        that will help you to <strong>overcome</strong> your life struggles\n      </p>\n    </div>\n  )\n}\n\nexport default ThoughtAuthor\n","import React, { Component } from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/theme/layout\"\nimport Seo from \"../components/seo/seo\"\nimport MainNavigation from \"../components/main-navigation\"\nimport ThoughtAuthor from \"../components/thoughts/thought-author\"\nimport ThemeSwitcher from \"../components/theme/theme-switcher\"\nimport ThoughtTeaser from \"../components/thoughts/thought-teaser\"\nimport BreadcrumbsSnippet from \"../components/seo/breadcrumbs-snippet\"\nimport Footer from \"../components/footer\"\n\nimport \"./thoughts.css\"\n\nclass ThoughtListPage extends Component {\n  render() {\n    const {\n      data: {\n        socialImage,\n        allMarkdownRemark: { edges },\n      },\n    } = this.props\n\n    return (\n      <Layout>\n        <Seo\n          title=\"Thoughts\"\n          pagePath=\"/thoughts/\"\n          className=\"thoughts-list-page\"\n          description=\"Thoughts and experience that will help you to go through your life in the very best way\"\n          imagePath={socialImage.publicURL}\n          keywords={[\n            \"thoughts\",\n            \"opinion\",\n            \"life exploring\",\n            \"psychology\",\n            \"Saifeddine Rajhi thoughts\",\n            \"Saifeddine Rajhi thoughts\",\n            \"life\",\n            \"people\",\n            \"management\",\n          ]}\n          meta={[]}\n        />\n        <div className=\"thoughts-wrapper\">\n          <h1 className=\"thoughts-title\">Thoughts</h1>\n          <aside className=\"thought-sidebar\">\n            <ThoughtAuthor />\n            <MainNavigation space={\"thoughts\"} />\n            <div className=\"theme-switcher\">\n              <ThemeSwitcher />\n            </div>\n          </aside>\n          <main className=\"thoughts-list\">\n          {edges.map(\n              ({\n                node: {\n                  timeToRead,\n                  frontmatter: {\n                    id,\n                    title,\n                    path,\n                    humanDate,\n                    fullDate,\n                    excerpt,\n                    keywords,\n                    cover: {\n                      childImageSharp: { gatsbyImageData },\n                    },\n                  },\n                },\n              }) => (\n                <ThoughtTeaser\n                  id={id}\n                  key={id}\n                  title={title}\n                  url={path}\n                  timeToRead={timeToRead}\n                  publishedHumanDate={humanDate}\n                  publishedFullDate={fullDate}\n                  excerpt={excerpt}\n                  cover={gatsbyImageData}\n                  keywords={keywords}\n                />\n              )\n            )}\n          </main>\n          <div className=\"clearfix\" />\n        </div>\n        <Footer />\n        <BreadcrumbsSnippet crumbs={[{ \"/thoughts/\": \"Thoughts\" }]} />\n      </Layout>\n    )\n  }\n}\n\nexport default ThoughtListPage\n\nexport const pageQuery = graphql`\n  query ThoughtListQuery {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: {\n        fileAbsolutePath: { regex: \"/(thoughts)/\" }\n        frontmatter: { published: { eq: true } }\n      }\n    ) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            id\n            excerpt\n            keywords\n            humanDate: date(formatString: \"MMM D, YYYY\")\n            fullDate: date(formatString: \"YYYY-MM-DD\")\n            path\n            title\n            cover {\n              childImageSharp {\n                gatsbyImageData(\n                  layout: CONSTRAINED\n                  width: 700\n                  placeholder: BLURRED\n                )\n              }\n            }\n          }\n        }\n      }\n    }\n    socialImage: file(relativePath: { eq: \"blog/seifrajhi-kcd-utrecht.jpg\" }) {\n      publicURL\n    }\n  }\n`\n","import * as React from \"react\"\nimport Helmet from \"react-helmet\"\n\nimport { useWebsiteMetadata } from \"../../hooks/website-metadata\"\n\ninterface Breadcrumb {\n  \"@type\": string\n  position: number\n  name: string\n  item: string\n}\n\ntype Crumb = Record<string, string>\n\ninterface Props {\n  crumbs: Crumb[]\n}\n\nconst BreadcrumbsSnippet = ({ crumbs = [] }: Props): JSX.Element => {\n  const { siteUrl } = useWebsiteMetadata()\n\n  const crumbItems: Breadcrumb[] = [\n    {\n      \"@type\": \"ListItem\",\n      position: 1,\n      name: \"Home\",\n      item: `${siteUrl}/`,\n    },\n  ]\n\n  crumbs.forEach((crumbItem: Crumb, idx: number) => {\n    const [[path, title]] = Object.entries(crumbItem)\n\n    crumbItems.push({\n      \"@type\": \"ListItem\",\n      position: idx + 2, // adjustment for the first home item which is in 1 position\n      name: title,\n      item: `${siteUrl}${path}`,\n    })\n  })\n\n  const schemaJSONLD = {\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    itemListElement: crumbItems,\n  }\n\n  return (\n    <Helmet>\n      <script type=\"application/ld+json\">{JSON.stringify(schemaJSONLD)}</script>\n    </Helmet>\n  )\n}\n\nexport default BreadcrumbsSnippet\n"],"names":["Logo","React","StaticImage","className","src","width","quality","formats","alt","__imageData","require","props","id","title","url","timeToRead","publishedHumanDate","publishedFullDate","excerpt","cover","keywords","articleReadRepository","_","useReadRepository","ContentTypes","THOUGHT","readingState","isFinished","status","ReadStatuses","FINISHED","isNew","publishDate","then","Date","now","Math","abs","getTime","isNewArticle","teaserRef","useRef","useEffect","element","current","gsap","fromTo","scale","duration","paused","ease","onReverseComplete","set","handleMouseEnter","to","handleMouseLeave","addEventListener","removeEventListener","ref","Link","GatsbyImage","image","dateTime","getStatusLabel","map","keyword","key","ThoughtAuthor","ThoughtListPage","_Component","apply","arguments","_inheritsLoose","prototype","render","data","socialImage","allMarkdownRemark","edges","this","Layout","Seo","pagePath","description","imagePath","publicURL","meta","MainNavigation","space","ThemeSwitcher","_ref","node","frontmatter","path","humanDate","fullDate","childImageSharp","gatsbyImageData","ThoughtTeaser","Footer","BreadcrumbsSnippet","crumbs","Component","siteUrl","useWebsiteMetadata","crumbItems","position","name","item","forEach","crumbItem","idx","Object","entries","push","schemaJSONLD","itemListElement","Helmet","type","JSON","stringify"],"sourceRoot":""}