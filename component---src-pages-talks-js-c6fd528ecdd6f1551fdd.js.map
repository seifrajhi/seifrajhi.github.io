{"version":3,"file":"component---src-pages-talks-js-c6fd528ecdd6f1551fdd.js","mappings":"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","sources":["webpack://seifrajhi.github.io/./src/components/seo/breadcrumbs-snippet.tsx","webpack://seifrajhi.github.io/./src/components/talks/talk-author.tsx","webpack://seifrajhi.github.io/./src/components/talks/talk-teaser.tsx","webpack://seifrajhi.github.io/./src/components/theme/logo.tsx","webpack://seifrajhi.github.io/./src/pages/talks.js"],"sourcesContent":["import * as React from \"react\"\nimport Helmet from \"react-helmet\"\n\nimport { useWebsiteMetadata } from \"../../hooks/website-metadata\"\n\ninterface Breadcrumb {\n  \"@type\": string\n  position: number\n  name: string\n  item: string\n}\n\ntype Crumb = Record<string, string>\n\ninterface Props {\n  crumbs: Crumb[]\n}\n\nconst BreadcrumbsSnippet = ({ crumbs = [] }: Props): JSX.Element => {\n  const { siteUrl } = useWebsiteMetadata()\n\n  const crumbItems: Breadcrumb[] = [\n    {\n      \"@type\": \"ListItem\",\n      position: 1,\n      name: \"Home\",\n      item: `${siteUrl}/`,\n    },\n  ]\n\n  crumbs.forEach((crumbItem: Crumb, idx: number) => {\n    const [[path, title]] = Object.entries(crumbItem)\n\n    crumbItems.push({\n      \"@type\": \"ListItem\",\n      position: idx + 2, // adjustment for the first home item which is in 1 position\n      name: title,\n      item: `${siteUrl}${path}`,\n    })\n  })\n\n  const schemaJSONLD = {\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    itemListElement: crumbItems,\n  }\n\n  return (\n    <Helmet>\n      <script type=\"application/ld+json\">{JSON.stringify(schemaJSONLD)}</script>\n    </Helmet>\n  )\n}\n\nexport default BreadcrumbsSnippet\n","import * as React from \"react\"\nimport Logo from \"../theme/logo\"\n\nimport \"./talk-author.css\"\n\nconst TalkAuthor = (): JSX.Element => {\n  return (\n    <div className=\"talk-author-wrapper\">\n      <div className=\"logo\">\n        <div className=\"avatar\">\n          <Logo />\n        </div>\n      </div>\n      <br></br>\n      <div className=\"name\">• Saifeddine Rajhi •</div>\n      <p className=\"talk-section-descr\">\n        Sharing my tech journey and insights in a <strong>fun</strong> and <strong>engaging</strong> way, making complex topics easy to understand and apply.\n      </p>\n    </div>\n  )\n}\n\nexport default TalkAuthor\n","import React, { useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\nimport gsap from \"gsap\";\nimport useReadRepository, {\n  getStatusLabel,\n  ReadStatuses,\n} from \"../../hooks/read-repository\";\n\nimport \"./talk-teaser.css\";\nimport { ContentTypes } from \"../analytics/reading-tracker\";\n\nconst isNewArticle = (publishDate: string): boolean => {\n  const then = new Date(publishDate);\n  const now = new Date();\n\n  const msBetweenDates = Math.abs(then.getTime() - now.getTime());\n  const daysBetweenDates = msBetweenDates / (24 * 60 * 60 * 1000);\n\n  return daysBetweenDates < 30;\n};\n\nconst TalkTeaser = (props) => {\n  const {\n    id,\n    title,\n    url,\n    timeToRead,\n    publishedHumanDate,\n    publishedFullDate,\n    excerpt,\n    cover,\n    keywords,\n  } = props;\n\n  const [articleReadRepository, _] = useReadRepository(ContentTypes.TALK);\n  const readingState = articleReadRepository[id];\n\n  const isFinished: boolean =\n    readingState && readingState.status == ReadStatuses.FINISHED;\n  const isNew: boolean = isNewArticle(publishedFullDate);\n\n  const teaserRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const element = teaserRef.current;\n\n    gsap.fromTo(\n      element,\n      { scale: 1 },\n      {\n        scale: 1.4,\n        duration: 0.5,\n        paused: true,\n        ease: \"steps(12)\",\n        onReverseComplete: () => { gsap.set(element, { scale: 1 }); return undefined; },\n      }\n    );\n\n    const handleMouseEnter = () => gsap.to(element, { scale: 1.05 });\n    const handleMouseLeave = () => gsap.to(element, { scale: 1 });\n\n    if (element) {\n      element.addEventListener(\"mouseenter\", handleMouseEnter);\n      element.addEventListener(\"mouseleave\", handleMouseLeave);\n    }\n\n    return () => {\n      element.removeEventListener(\"mouseenter\", handleMouseEnter);\n      element.removeEventListener(\"mouseleave\", handleMouseLeave);\n    };\n  }, []);\n\n  return (\n    <article className=\"talk-item\" ref={teaserRef}>\n      <Link className=\"talk-header\" to={url}>\n        <div className=\"cover-filter\">\n          <GatsbyImage className=\"cover\" objectFit=\"fill\"  image={cover} alt={title} />\n        </div>\n        {isNew ? (\n          <div\n            className={`new-badge`}\n            title={`Published less than a month ago`}\n          >\n            new\n          </div>\n        ) : (\n          \"\"\n        )}\n      </Link>\n      <div className=\"article-details\">\n        <h2>\n          <Link to={url}>{title}</Link>\n        </h2>\n        <div className=\"talk-details\">\n          <time className=\"talk-createdat\" dateTime={publishedFullDate}>\n            {publishedHumanDate}\n          </time>\n          <span> • </span>\n          <span className=\"talk-time2read\">\n            {timeToRead}\n            {timeToRead > 1 ? \"mins\" : \"min\"} read\n          </span>\n          {!isFinished ? (\n            <>\n              <span> • </span>\n              <span className={`unread-badge`}>\n                {getStatusLabel(readingState?.status)}\n              </span>\n            </>\n          ) : (\n            \"\"\n          )}\n        </div>\n        <p className=\"talk-digest\">{excerpt}</p>\n        <ul className=\"talk-tags\">\n          {keywords.map((keyword: string) => (\n            <li key={url + keyword}>{keyword}</li>\n          ))}\n        </ul>\n      </div>\n    </article>\n  );\n};\n\nTalkTeaser.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  publishedFullDate: PropTypes.string.isRequired,\n  publishedHumanDate: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired,\n  cover: PropTypes.object.isRequired,\n  keywords: PropTypes.array.isRequired,\n};\n\nexport default TalkTeaser;\n","import * as React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Logo = (): JSX.Element => {\n  // TODO: parametrize and unify this component with Avatar one\n  return (\n    <StaticImage\n      className=\"logo-img\"\n      src={`../../images/homepage/saifeddine-rajhi.jpeg`}\n      width={150}\n      quality={80}\n      formats={[\"auto\", \"webp\", \"avif\"]}\n      alt={`Saifeddine Rajhi`}\n    />\n  )\n}\n\nexport default Logo\n","import React, { Component } from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/theme/layout\"\nimport Seo from \"../components/seo/seo\"\nimport MainNavigation from \"../components/main-navigation\"\nimport TalkAuthor from \"../components/talks/talk-author\"\nimport ThemeSwitcher from \"../components/theme/theme-switcher\"\nimport TalkTeaser from \"../components/talks/talk-teaser\"\nimport BreadcrumbsSnippet from \"../components/seo/breadcrumbs-snippet\"\nimport Footer from \"../components/footer\"\n\nimport \"./talks.css\"\n\nclass TalkListPage extends Component {\n  render() {\n    const {\n      data: {\n        socialImage,\n        allMarkdownRemark: { edges },\n      },\n    } = this.props\n\n    return (\n      <Layout>\n        <Seo\n          title=\"Talks\"\n          pagePath=\"/talks/\"\n          className=\"talks-list-page\"\n          description=\"Talks and experience that will help you to go through your life in the very best way\"\n          imagePath={socialImage.publicURL}\n          keywords={[\n            \"talks\",\n            \"opinion\",\n            \"life exploring\",\n            \"psychology\",\n            \"Saifeddine Rajhi talks\",\n            \"Saifeddine Rajhi talks\",\n            \"life\",\n            \"people\",\n            \"management\",\n          ]}\n          meta={[]}\n        />\n        <div className=\"talks-wrapper\">\n          <h1 className=\"talks-title\">Talks</h1>\n          <aside className=\"talk-sidebar\">\n            <TalkAuthor />\n            <MainNavigation space={\"talks\"} />\n            <div className=\"theme-switcher\">\n              <ThemeSwitcher />\n            </div>\n          </aside>\n          <main className=\"talks-list\">\n          {edges.map(\n              ({\n                node: {\n                  timeToRead,\n                  frontmatter: {\n                    id,\n                    title,\n                    path,\n                    humanDate,\n                    fullDate,\n                    excerpt,\n                    keywords,\n                    cover: {\n                      childImageSharp: { gatsbyImageData },\n                    },\n                  },\n                },\n              }) => (\n                <TalkTeaser\n                  id={id}\n                  key={id}\n                  title={title}\n                  url={path}\n                  timeToRead={timeToRead}\n                  publishedHumanDate={humanDate}\n                  publishedFullDate={fullDate}\n                  excerpt={excerpt}\n                  cover={gatsbyImageData}\n                  keywords={keywords}\n                />\n              )\n            )}\n          </main>\n          <div className=\"clearfix\" />\n        </div>\n        <Footer />\n        <BreadcrumbsSnippet crumbs={[{ \"/talks/\": \"Talks\" }]} />\n      </Layout>\n    )\n  }\n}\n\nexport default TalkListPage\n\nexport const pageQuery = graphql`\n  query TalkListQuery {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: {\n        fileAbsolutePath: { regex: \"/(talks)/\" }\n        frontmatter: { published: { eq: true } }\n      }\n    ) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            id\n            excerpt\n            keywords\n            humanDate: date(formatString: \"MMM D, YYYY\")\n            fullDate: date(formatString: \"YYYY-MM-DD\")\n            path\n            title\n            cover {\n              childImageSharp {\n                gatsbyImageData(\n                  layout: CONSTRAINED\n                  width: 700\n                  placeholder: BLURRED\n                )\n              }\n            }\n          }\n        }\n      }\n    }\n    socialImage: file(relativePath: { eq: \"blog/seifrajhi-kcd-utrecht.jpg\" }) {\n      publicURL\n    }\n  }\n`\n"],"names":["_ref","crumbs","siteUrl","useWebsiteMetadata","crumbItems","position","name","item","forEach","crumbItem","idx","path","title","Object","entries","push","schemaJSONLD","itemListElement","React","Helmet","type","JSON","stringify","TalkAuthor","className","Logo","props","id","url","timeToRead","publishedHumanDate","publishedFullDate","excerpt","cover","keywords","articleReadRepository","_","useReadRepository","ContentTypes","TALK","readingState","isFinished","status","ReadStatuses","FINISHED","isNew","publishDate","then","Date","now","Math","abs","getTime","isNewArticle","teaserRef","useRef","useEffect","element","current","gsap","fromTo","scale","duration","paused","ease","onReverseComplete","set","handleMouseEnter","to","handleMouseLeave","addEventListener","removeEventListener","ref","Link","GatsbyImage","objectFit","image","alt","dateTime","getStatusLabel","map","keyword","key","StaticImage","src","width","quality","formats","__imageData","require","TalkListPage","_Component","apply","arguments","_inheritsLoose","prototype","render","data","socialImage","allMarkdownRemark","edges","this","Layout","Seo","pagePath","description","imagePath","publicURL","meta","MainNavigation","space","ThemeSwitcher","node","frontmatter","humanDate","fullDate","childImageSharp","gatsbyImageData","TalkTeaser","Footer","BreadcrumbsSnippet","Component"],"sourceRoot":""}