{"version":3,"file":"component---src-templates-thought-template-js-22418db5dfd1822532e8.js","mappings":"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","sources":["webpack://seifrajhi.github.io/./src/components/blog/newsletter-form.tsx","webpack://seifrajhi.github.io/./src/components/thoughts/thought-author.tsx","webpack://seifrajhi.github.io/./src/components/thoughts/thought.js","webpack://seifrajhi.github.io/./src/components/thoughts/thought-navigation.js","webpack://seifrajhi.github.io/./src/templates/thoughtTemplate.js"],"sourcesContent":["import * as React from \"react\"\n\nimport \"./newsletter-form.css\"\n\nconst NewsletterForm = (): JSX.Element => {\n  return (\n    <div data-nosnippet=\"\" className=\"newsletter-form\">\n      <iframe\n        src=\"https://rajhisaif.substack.com/embed\"\n        loading=\"lazy\"\n        width=\"100%\"\n        height=\"320\"\n        style={{ border: \"10px solid #fff\" }}\n        frameBorder=\"0\"\n        scrolling=\"no\"\n        title=\"Newsletter Form\"\n      />\n    </div>\n  )\n}\n\nexport default NewsletterForm\n","import * as React from \"react\"\nimport Logo from \"../theme/logo\"\n\nimport \"./thought-author.css\"\n\nconst ThoughtAuthor = (): JSX.Element => {\n  return (\n    <div className=\"thought-author-wrapper\">\n      <div className=\"logo\">\n        <div className=\"avatar\">\n          <Logo />\n        </div>\n      </div>\n      <div className=\"name\">• Saifeddine Rajhi •</div>\n      <p className=\"thought-section-descr\">\n        My thoughts, pieces of advice and personal & professional life experience <br />\n        that will help you to <strong>overcome</strong> your life struggles\n      </p>\n    </div>\n  )\n}\n\nexport default ThoughtAuthor\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nimport MainNavigation from \"../main-navigation\"\nimport ThemeSwitcher from \"../theme/theme-switcher\"\nimport ReadingTracker, { ContentTypes } from \"../analytics/reading-tracker\"\n\nimport \"./thought.css\"\nimport \"../theme/content.css\"\n\nconst Thought = (props) => {\n  const {\n    title,\n    keywords,\n    timeToRead,\n    publishedHumanDate,\n    publishedFullDate,\n    contentHtml,\n    cover,\n    coverCredits,\n  } = props\n\n  return (\n    <article className=\"thought-wrapper\">\n      <header>\n      <figure className=\"cover\">\n          <div className=\"cover-filter\">\n            <GatsbyImage\n              className=\"cover cover-image\"\n              image={cover}\n              alt={title}\n            />\n          </div>\n          <figcaption\n            data-nosnippet=\"\"\n            className=\"image-title\"\n            dangerouslySetInnerHTML={{ __html: coverCredits }}\n          />\n        </figure>\n        <MainNavigation space={\"thoughts\"} />\n        <h1>{title}</h1>\n        <div data-nosnippet=\"\" className=\"thought-details\">\n          <time className=\"thought-createdat\" dateTime={publishedFullDate}>\n            {publishedHumanDate}\n          </time>\n          <span> • </span>\n          <span className=\"thought-time2read\">\n            {timeToRead}\n            {timeToRead > 1 ? \"mins\" : \"min\"} read\n          </span>\n          <div className=\"theme-switcher\">\n            <ThemeSwitcher />\n          </div>\n        </div>\n      </header>\n      <div className=\"thought-divider\" />\n      <ul data-nosnippet=\"\" className=\"thought-tags\">\n          {keywords.map((keyword) => (\n            <li key={`tag-${keyword}`}>{keyword}</li>\n          ))}\n      </ul>\n      <div className=\"thought-divider\" />\n      <ReadingTracker contentType={ContentTypes.THOUGHT}>\n        <div\n          className=\"content thought-content\"\n          dangerouslySetInnerHTML={{ __html: contentHtml }}\n        />\n      </ReadingTracker>\n    </article>\n  )\n}\n\nThought.propTypes = {\n  title: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  publishedHumanDate: PropTypes.string.isRequired,\n  publishedFullDate: PropTypes.string.isRequired,\n  contentHtml: PropTypes.string.isRequired,\n}\n\nexport default Thought\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link } from \"gatsby\"\n\nimport \"./thought-navigation.css\"\n\nconst ThoughtNavigation = (props) => {\n  const {\n    next: { frontmatter: { title: nextTitle, path: nextUrl } = {} } = {},\n    prev: { frontmatter: { title: prevTitle, path: prevUrl } = {} } = {},\n  } = props\n\n  return (\n    <div className=\"thought-navigation-wrapper\">\n      <nav className=\"thought-navigation\">\n        <div className=\"nav-links\">\n          {nextUrl && (\n            <Link rel=\"next\" className=\"next-thought\" to={nextUrl}>\n              {nextTitle} →\n            </Link>\n          )}\n          {prevUrl && (\n            <Link rel=\"prev\" className=\"prev-thought\" to={prevUrl}>\n              ← {prevTitle}\n            </Link>\n          )}\n          <Link className=\"all-thoughts\" to=\"/thoughts/\">\n            All Thoughts\n          </Link>\n        </div>\n      </nav>\n    </div>\n  )\n}\n\nThoughtNavigation.propTypes = {\n  next: PropTypes.object,\n  prev: PropTypes.object,\n}\n\nexport default ThoughtNavigation\n","import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport ThoughtAuthor from \"../components/thoughts/thought-author\"\nimport Thought from \"../components/thoughts/thought\"\nimport ThoughtNavigation from \"../components/thoughts/thought-navigation\"\nimport Layout from \"../components/theme/layout\"\nimport Footer from \"../components/footer\"\nimport Seo from \"../components/seo/seo\"\nimport NewsletterForm from \"../components/blog/newsletter-form\"\nimport ShareBlock from \"../components/thoughts/share-block\"\nimport BreadcrumbsSnippet from \"../components/seo/breadcrumbs-snippet\"\nimport ArticleRichSnippet from \"../components/seo/article-snippet\"\n\nimport \"./ThoughtView.css\"\n\nexport default function Template({\n  data,\n  pageContext: { prevThought, nextThought },\n}) {\n  const {\n    markdownRemark: {\n      frontmatter: {\n        id,\n        path,\n        title,\n        humanDate,\n        fullDate,\n        keywords,\n        cover: {\n          childImageSharp: { gatsbyImageData },\n        },\n        coverCredits,\n      },\n      html,\n      rawMarkdownBody,\n      timeToRead,\n      excerpt,\n      wordCount: { words },\n    },\n  } = data\n\n  return (\n    <Layout>\n      <Seo\n        title={`${title} - Thoughts`}\n        className=\"thought-view-page\"\n        pagePath={path}\n        imagePath={gatsbyImageData.images.fallback.src}\n        ogType=\"article\"\n        description={excerpt}\n        keywords={keywords}\n        meta={[]}\n      />\n      <div className=\"thoughts-title\">\n        <Link to=\"/thoughts/\">Thoughts</Link>\n      </div>\n      <main>\n        <Thought\n          title={title}\n          timeToRead={timeToRead}\n          publishedHumanDate={humanDate}\n          publishedFullDate={fullDate}\n          keywords={keywords}\n          cover={gatsbyImageData}\n          coverCredits={coverCredits}\n          contentHtml={html}\n        />\n        <ShareBlock title={title} path={path} tags={keywords} className=\"spaced-component\" />\n        <NewsletterForm />\n      </main>\n      <aside className=\"thought-sidebar\">\n        <ThoughtAuthor />\n        <ThoughtNavigation prev={prevThought} next={nextThought} />\n      </aside>\n      <Footer />\n      <ArticleRichSnippet\n        title={title}\n        path={path}\n        datePublished={fullDate}\n        dateModified={fullDate} // gitLogLatestDate\n        content={rawMarkdownBody}\n        wordCount={words}\n        keywords={keywords}\n        cover={gatsbyImageData}\n        articleSection={\"Thoughts\"}\n        genre={[\n          \"self-improvement\",\n          \"management\",\n          \"thoughts\",\n          \"life experience\",\n          \"life exploration\",\n        ]}\n      />\n      <BreadcrumbsSnippet\n        crumbs={[{ \"/thoughts/\": \"Thoughts\" }, { [path]: title }]}\n      />\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query ($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      timeToRead\n      excerpt\n      rawMarkdownBody\n      wordCount {\n        words\n      }\n      frontmatter {\n        id\n        path\n        humanDate: date(formatString: \"MMM D, YYYY\")\n        fullDate: date(formatString: \"YYYY-MM-DD\")\n        title\n        keywords\n        cover {\n          childImageSharp {\n            gatsbyImageData(layout: FULL_WIDTH, placeholder: BLURRED)\n          }\n        }\n        coverCredits\n      }\n    }\n  }\n`\n"],"names":["NewsletterForm","React","className","src","loading","width","height","style","border","frameBorder","scrolling","title","ThoughtAuthor","Logo","props","keywords","timeToRead","publishedHumanDate","publishedFullDate","contentHtml","cover","coverCredits","GatsbyImage","image","alt","dangerouslySetInnerHTML","__html","MainNavigation","space","dateTime","ThemeSwitcher","map","keyword","key","ReadingTracker","contentType","ContentTypes","THOUGHT","next","frontmatter","nextTitle","path","nextUrl","prev","prevTitle","prevUrl","Link","rel","to","Template","_ref","data","pageContext","prevThought","nextThought","markdownRemark","id","humanDate","fullDate","childImageSharp","gatsbyImageData","html","rawMarkdownBody","excerpt","wordCount","words","Layout","Seo","pagePath","imagePath","images","fallback","ogType","description","meta","Thought","ShareBlock","tags","ThoughtNavigation","Footer","ArticleRichSnippet","datePublished","dateModified","content","articleSection","genre","BreadcrumbsSnippet","crumbs"],"sourceRoot":""}