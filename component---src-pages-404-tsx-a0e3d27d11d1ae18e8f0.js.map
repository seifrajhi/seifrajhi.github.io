{"version":3,"file":"component---src-pages-404-tsx-a0e3d27d11d1ae18e8f0.js","mappings":"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","sources":["webpack://seifrajhi.github.io/./src/components/404/pokemon.tsx","webpack://seifrajhi.github.io/./src/pages/404.tsx","webpack://seifrajhi.github.io/./src/components/seo/breadcrumbs-snippet.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\n\nimport \"./pokemon.css\"\n\ninterface Stat {\n  name: Stats\n  value: number\n}\n\ninterface Ability {\n  name: string\n  hidden: boolean\n  description: string\n}\n\ninterface Specie {\n  mythical: boolean\n  legendary: boolean\n  baby: boolean\n  capture_rate: number\n  description: string\n  generation: string\n  evolveFrom: undefined | string\n  varieties: undefined | number\n  habitat: undefined | string\n  eggGroups: string[]\n  growthRate: string\n  shape: string\n}\n\ninterface PokemonData {\n  name: string\n  specie: Specie\n  base_exp: number\n  imageUrl: string\n  types: string[]\n  height: number\n  weight: number\n  stats: Stat[]\n  abilities: Ability[]\n}\n\ninterface Props {\n  children: JSX.Element\n}\n\nexport const randomPokemonID = (): number => {\n  const minID: number = 1\n  const maxID: number = 600\n\n  return Math.floor(Math.random() * (maxID - minID + 1) + minID)\n}\n\nconst noDash = (value: string): string => {\n  return value.replace(\"-\", \" \")\n}\n\nconst cleanDescription = (value: string, name: string): string => {\n  return value.replace(\"POKÃ©MON\", \"pokemon\").replace(name.toUpperCase(), name)\n}\n\nasync function fetchJson<T>(url: string): Promise<T> {\n  return fetch(url).then((res) => res.json())\n}\n\nconst fetchAbilities = async (\n  rawAbilities: RawAbility[]\n): Promise<Ability[]> => {\n  return Promise.all(\n    rawAbilities.map(async (rawAbility: RawAbility) => {\n      const ability = await fetchJson<PokemonAbilityOut>(rawAbility.ability.url)\n      const effectInEng: EffectEntry | undefined = ability.effect_entries.find(\n        (entry: EffectEntry) => entry.language.name == \"en\"\n      )\n\n      return {\n        name: rawAbility.ability.name,\n        hidden: rawAbility.is_hidden,\n        description: effectInEng?.short_effect,\n      } as Ability\n    })\n  )\n}\n\nconst fetchSpecieInfo = async (ID: number): Promise<Specie> => {\n  return await fetchJson<SpecieOut>(\n    `https://pokeapi.co/api/v2/pokemon-species/${ID}/`\n  ).then((specieData: SpecieOut) => {\n    console.log(specieData)\n\n    const engEntries: FlavorTextEntry[] = specieData.flavor_text_entries.filter(\n      (entry) => entry.language.name === \"en\"\n    )\n    let description: string = \"\"\n\n    if (engEntries) {\n      description = engEntries.sort(() => 0.5 - Math.random())[0].flavor_text\n    }\n\n    const generation: string = specieData.generation.name\n      .replace(\"generation-\", \"\")\n      .toUpperCase()\n    const evolveFrom: string | undefined = specieData.evolves_from_species?.name\n    const varieties: number | undefined =\n      specieData.varieties.length > 1 ? specieData.varieties.length : undefined\n    const eggGroups: string[] = specieData.egg_groups.map((group) =>\n      group.name.replace(\"indeterminate\", \"N/A\")\n    )\n    const habitat: string | undefined = specieData.habitat?.name\n    const growthRate: string = specieData.growth_rate.name\n\n    return {\n      mythical: specieData.is_mythical,\n      baby: specieData.is_baby,\n      legendary: specieData.is_legendary,\n      generation,\n      description,\n      evolveFrom,\n      varieties,\n      eggGroups,\n      habitat,\n      growthRate,\n    } as Specie\n  })\n}\n\nconst fetchPokemon = async (ID: number): Promise<PokemonData> => {\n  return fetchJson<PokemonDataOut>(\n    `https://pokeapi.co/api/v2/pokemon/${ID}/`\n  ).then(async (pokeData) => {\n    return {\n      name: pokeData.name,\n      imageUrl: pokeData?.sprites?.other?.dream_world?.front_default,\n      types: pokeData?.types.map((type: RawTypeItem) => type.type?.name),\n      weight: pokeData?.weight,\n      height: pokeData?.height,\n      stats: pokeData?.stats.map((statItem: RawStatItem) => ({\n        name: statItem.stat.name,\n        value: statItem.base_stat,\n      })),\n      specie: await fetchSpecieInfo(ID),\n      base_exp: pokeData.base_experience,\n      abilities: await fetchAbilities(pokeData.abilities),\n    } as PokemonData\n  })\n}\n\nconst Pokemon = ({ children }: Props): JSX.Element => {\n  const [pokemonID, _] = useState(randomPokemonID())\n  const [pokemonData, setPokemonData] = useState<PokemonData | undefined>(\n    undefined\n  )\n\n  useEffect(() => {\n    const fetchRandomPokemon = async (pokemonID: number) => {\n      const pokemonData: PokemonData = await fetchPokemon(pokemonID)\n      setPokemonData(pokemonData)\n    }\n\n    fetchRandomPokemon(pokemonID)\n  }, [pokemonID, setPokemonData])\n\n  if (!pokemonData) {\n    return <div className={`pokemon loading`}>Looking for pokemons..</div>\n  }\n\n  const {\n    name,\n    imageUrl,\n    types,\n    weight,\n    height,\n    stats,\n    abilities,\n    base_exp,\n    specie,\n  } = pokemonData\n\n  return (\n    <div className={`pokemon`}>\n      <div className={`pokeball`}>\n        <img src={imageUrl} alt={name} title={name} />\n      </div>\n      {children}\n      <div className={`info`}>\n        <h2 className={`name`}>\n          {name}{\" \"}\n          <span title={\"Generation\"} className={`generation`}>\n            {specie.generation}\n          </span>\n        </h2>\n        <div className={`statuses`}>\n          {specie.baby ? <span>baby</span> : \"\"}\n          {specie.legendary ? <span>legendary</span> : \"\"}\n          {specie.mythical ? <span>mythical</span> : \"\"}\n        </div>\n        <p className={`description`}>\n          {cleanDescription(specie.description || \"\", name)}\n        </p>\n      </div>\n      <div className=\"pokeinfo\">\n        <div className={`specie-info`}>\n          <div className={`specie`}>\n            <h3>Specie</h3>\n            <ul>\n              <li key={`type`}>\n                <span className={`key`}>Type:</span>\n                <span className={`value type`}>{types.join(\" + \")}</span>\n              </li>\n              {specie.evolveFrom ? (\n                <li key={`evolve-from`}>\n                  <span className={`key`}>Evolve From:</span>\n                  <span className={`value`}>{specie.evolveFrom}</span>\n                </li>\n              ) : (\n                \"\"\n              )}\n              {specie.habitat ? (\n                <li key={`habitat`}>\n                  <span className={`key`}>Habitat:</span>\n                  <span className={`value`}>{specie.habitat}</span>\n                </li>\n              ) : (\n                \"\"\n              )}\n              {specie.growthRate ? (\n                <li key={`growth-rate`}>\n                  <span className={`key`}>Growth Rate:</span>\n                  <span className={`value`}>{specie.growthRate}</span>\n                </li>\n              ) : (\n                \"\"\n              )}\n              {specie.varieties ? (\n                <li key={`varieties`}>\n                  <span className={`key`}>Varieties:</span>\n                  <span className={`value`}>{specie.varieties}</span>\n                </li>\n              ) : (\n                \"\"\n              )}\n              {specie.eggGroups ? (\n                <li key={`egg-groups`}>\n                  <span className={`key`}>Egg Group:</span>\n                  <span className={`value`}>{specie.eggGroups.join(\", \")}</span>\n                </li>\n              ) : (\n                \"\"\n              )}\n            </ul>\n          </div>\n          <div className={`abilities`}>\n            <h3>Abilities</h3>\n            <ul>\n              {abilities.map((ability: Ability) => (\n                <li key={ability.name}>\n                  <span className={`name`}>{noDash(ability.name)}</span>\n                  <span role={`img`} title={ability.description}>\n                    â\n                  </span>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n        <div className={`stats`}>\n          <h3>Stats</h3>\n          <ul>\n            <li key={`weight`}>\n              <span className={`key name`}>Weight:</span>\n              <span className={`value`}>{weight}</span>\n            </li>\n            <li key={`height`}>\n              <span className={`key name`}>Height:</span>\n              <span className={`value`}>{height}</span>\n            </li>\n            <li key={`base_exp`}>\n              <span className={`key name`}>Base EXP:</span>\n              <span className={`value`}>{base_exp}</span>\n            </li>\n            {stats.map((stat: Stat) => (\n              <li key={stat.name}>\n                <span className={`key name ${stat.name.toLowerCase()}`}>\n                  {noDash(stat.name.replace(\"special\", \"sp.\"))}:\n                </span>\n                <span className={`value`}>{stat.value}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Pokemon\n","import * as React from \"react\"\n\nimport Layout from \"../components/theme/layout\"\nimport Seo from \"../components/seo/seo\"\nimport MainNavigation from \"../components/main-navigation\"\nimport BreadcrumbsSnippet from \"../components/seo/breadcrumbs-snippet\"\nimport ThemeSwitcher from \"../components/theme/theme-switcher\"\n\nimport \"../components/404/404.css\"\nimport Pokemon from \"../components/404/pokemon\"\n\nconst NotFoundPage = (): JSX.Element => (\n  <Layout>\n    <Seo\n      title=\"404: Not Found\"\n      className=\"not-found-page\"\n      meta={[\n        {\n          name: `robots`,\n          content: `noindex,nofollow`,\n        },\n      ]}\n    />\n    <div className=\"container\">\n      <main className=\"row not-found-wrapper\">\n        <div className=\"not-found-content\">\n          <Pokemon>\n            <h1>Not Found</h1>\n            <MainNavigation space=\"404\" />\n            <p>\n              You just hit a route that <strong>doesn&#39;t exist</strong>.\n            </p>\n            <p className={`pokemon-intro`}>\n              At least you have found a pokemon:\n            </p>\n          </Pokemon>\n          <ThemeSwitcher />\n        </div>\n      </main>\n      <BreadcrumbsSnippet crumbs={[]} />\n    </div>\n  </Layout>\n)\n\nexport default NotFoundPage\n","import * as React from \"react\"\nimport Helmet from \"react-helmet\"\n\nimport { useWebsiteMetadata } from \"../../hooks/website-metadata\"\n\ninterface Breadcrumb {\n  \"@type\": string\n  position: number\n  name: string\n  item: string\n}\n\ntype Crumb = Record<string, string>\n\ninterface Props {\n  crumbs: Crumb[]\n}\n\nconst BreadcrumbsSnippet = ({ crumbs = [] }: Props): JSX.Element => {\n  const { siteUrl } = useWebsiteMetadata()\n\n  const crumbItems: Breadcrumb[] = [\n    {\n      \"@type\": \"ListItem\",\n      position: 1,\n      name: \"Home\",\n      item: `${siteUrl}/`,\n    },\n  ]\n\n  crumbs.forEach((crumbItem: Crumb, idx: number) => {\n    const [[path, title]] = Object.entries(crumbItem)\n\n    crumbItems.push({\n      \"@type\": \"ListItem\",\n      position: idx + 2, // adjustment for the first home item which is in 1 position\n      name: title,\n      item: `${siteUrl}${path}`,\n    })\n  })\n\n  const schemaJSONLD = {\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    itemListElement: crumbItems,\n  }\n\n  return (\n    <Helmet>\n      <script type=\"application/ld+json\">{JSON.stringify(schemaJSONLD)}</script>\n    </Helmet>\n  )\n}\n\nexport default BreadcrumbsSnippet\n"],"names":["noDash","value","replace","async","fetchJson","url","fetch","then","res","json","fetchAbilities","Promise","all","rawAbilities","map","effectInEng","rawAbility","ability","effect_entries","find","entry","language","name","hidden","is_hidden","description","short_effect","fetchSpecieInfo","ID","specieData","_specieData$evolves_f","_specieData$habitat","console","log","engEntries","flavor_text_entries","filter","sort","Math","random","flavor_text","generation","toUpperCase","evolveFrom","evolves_from_species","varieties","length","undefined","eggGroups","egg_groups","group","habitat","growthRate","growth_rate","mythical","is_mythical","baby","is_baby","legendary","is_legendary","_ref","children","pokemonID","_","useState","floor","pokemonData","setPokemonData","useEffect","_pokeData$sprites","_pokeData$sprites$oth","_pokeData$sprites$oth2","pokeData","imageUrl","sprites","other","dream_world","front_default","types","type","_type$type","weight","height","stats","statItem","stat","base_stat","specie","base_exp","base_experience","abilities","fetchPokemon","fetchRandomPokemon","React","className","src","alt","title","cleanDescription","key","join","role","toLowerCase","NotFoundPage","Layout","Seo","meta","content","Pokemon","MainNavigation","space","ThemeSwitcher","BreadcrumbsSnippet","crumbs","siteUrl","useWebsiteMetadata","crumbItems","position","item","forEach","crumbItem","idx","path","Object","entries","push","schemaJSONLD","itemListElement","Helmet","JSON","stringify"],"sourceRoot":""}