{"version":3,"file":"component---src-pages-thoughts-js-183610c1154d2fcdde9e.js","mappings":"uLAOO,IAAKA,EAAY,SAAZA,GAAY,OAAZA,EAAY,YAAZA,EAAY,kBAAZA,EAAY,UAAZA,CAAY,MAuNxB,IA3MwBC,IACtB,MAAM,EAACC,IAAeC,EAAAA,EAAAA,UAAiBF,EAAMC,cACvC,EAACE,IAAiBD,EAAAA,EAAAA,WAAiB,IAAIE,MAAOC,YAC9C,EAACC,EAAe,EAACC,IAAqBL,EAAAA,EAAAA,WAAkB,IACxD,EAACM,EAAiB,EAACC,IAAuBP,EAAAA,EAAAA,UAAiB,IAC3D,EAACQ,EAAa,EAACC,IAAmBT,EAAAA,EAAAA,WAAkB,IACpD,EAACU,EAAe,EAACC,IAAqBX,EAAAA,EAAAA,UAAiB,IAEtDY,EAAgBC,IAAsBC,EAAAA,EAAAA,IAC3ChB,EAAMC,aAGFgB,EACJC,IAEA,MAAMC,EAAqCD,EAE3C,IAAKC,EAAQC,gBAAkBD,EAAQE,mBAAqB,EAC1D,OAGF,GAAIf,EAEF,OAGF,MAAMgB,GAAoB,IAAIlB,MAAOC,UAC/BkB,EAAqCC,KAAKC,OAC7CH,EAAYnB,GAAiB,KAGhCuB,OAAOC,uBAAsB,KACL,oBAAXD,aAAiD,IAAhBA,OAAOE,MACjDF,OAAOE,KAAK,QAAS,eAAgB,CACnCC,eAAgB,UAChBC,YAAa7B,EACb8B,MAAOR,GAEX,IAGFhB,GAAkB,GAClBE,EAAoBa,GAGpB,MAAMU,EAAuBlB,EAAed,EAAMiC,KAAO,CACvDC,OAAQC,EAAAA,GAAaC,QACrBC,WAAY,IAAIjC,MAGd4B,EAAUE,QAAUC,EAAAA,GAAaG,WAKrCN,EAAUE,OAASC,EAAAA,GAAaC,QAChCJ,EAAUK,WAAa,IAAIjC,KAE3BU,EAAed,EAAMiC,IAAMD,EAC3BjB,EAAmBD,GAAe,EAG9ByB,EAAgBC,IACpB,IAAKlC,EACH,OAGF,GAAII,EACF,OAGF,MAAM+B,EAAmC,GAUzC,GARAD,EAASE,SAASvB,KACXA,EAAQC,gBAAkBD,EAAQE,mBAAqB,GAI5DoB,EAAuBE,KAAKxB,EAAQyB,OAAOC,aAAa,MAAgB,IAGpC,IAAlCJ,EAAuBK,OACzB,OAGFpB,OAAOC,uBAAsB,KAC3B,MAAMoB,GAAmB,IAAI3C,MAAOC,UAC9B2C,EAAiBxB,KAAKC,OACzBsB,EAAmBvC,GAAoB,KAGpB,oBAAXkB,aAAiD,IAAhBA,OAAOE,MACjDF,OAAOE,KAAK,QAAS,UAAW,CAC9BC,eAAgB,UAChBC,YAAa7B,EACb8B,MAAOiB,GAEX,IAGF,MAAMhB,EAAuBlB,EAAed,EAAMiC,KAAO,CACvDC,OAAQC,EAAAA,GAAaC,QACrBC,WAAY,IAAIjC,MAGd4B,EAAUE,QAAUC,EAAAA,GAAaG,WAKrCN,EAAUE,OAASC,EAAAA,GAAaC,QAChCJ,EAAUK,WAAa,IAAIjC,KAE3BU,EAAed,EAAMiC,IAAMD,EAC3BjB,EAAmBD,GAAe,EAG9BmC,EACJ/B,IAEA,MAAMgC,EAAwChC,EAE9C,IAAKgC,EAAW9B,gBAAkB8B,EAAW7B,mBAAqB,EAChE,OAGF,GAAIX,EAEF,OAGF,MAAMyC,GAAkB,IAAI/C,MAAOC,UAEnCM,GAAgB,GAChBE,EAAkBsC,GAElB,MAAMC,EAA2B5B,KAAKC,OACnCb,EAAiBJ,GAAoB,KAGxCkB,OAAOC,uBAAsB,KACL,oBAAXD,aAAiD,IAAhBA,OAAOE,MACjDF,OAAOE,KAAK,QAAS,aAAc,CACjCC,eAAgB,UAChBC,YAAa7B,EACb8B,MAAOqB,GAEX,IAGF,MAAMpB,EAAuBlB,EAAed,EAAMiC,IAE9CD,GAAaA,EAAUE,QAAUC,EAAAA,GAAaG,WAKlDxB,EAAed,EAAMiC,IAAM,CACzBC,OAAQC,EAAAA,GAAaG,SACrBD,WAAY,IAAIjC,MAElBW,EAAmBD,GAAe,EAgCpC,OA7BAuC,EAAAA,EAAAA,YAAU,KACR,GAAsB,oBAAX3B,OACT,OAGF,MAAM4B,EAA4BC,SAASC,eAAe,SACpDC,EAA0BF,SAASC,eAAe,eAElDE,EAAqCC,MAAMC,KAC/CL,SAASM,iBAAiB,oBAGtBC,EAAoCH,MAAMC,KAC9CL,SAASM,iBAAiB,oBAEtBE,EAA6BL,EAAaM,OAAOF,GAEjDG,EAAuB,IAAIC,qBAAqBjD,GAChDkD,EAAqB,IAAID,qBAAqBjB,GAC9CmB,EAAkB,IAAIF,qBAAqB3B,GAEjDwB,EAAYrB,SAASvB,IACnBiD,EAAgBC,QAAQlD,EAAQ,IAGlC8C,EAAqBI,QAAQf,GAC7Ba,EAAmBE,QAAQZ,EAAW,GACrC,IAGDa,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKrC,GAAG,UACPjC,EAAMuE,SACPD,EAAAA,cAAA,OAAKrC,GAAG,gBACP,C,8CC3LP,IAzBeuC,KACb,MAAMC,EAAoB,IAAIrE,KAE9B,OACEkE,EAAAA,cAAA,UAAQ,iBAAe,IACrBA,EAAAA,cAAA,OAAKI,UAAU,kBACbJ,EAAAA,cAACK,EAAAA,EAAW,CAACC,aAAa,EAAMC,SAAU,OAC1CP,EAAAA,cAAA,OAAKI,UAAU,aAAY,6BACED,EAAYK,cAAc,IAACR,EAAAA,cAAA,WACtDA,EAAAA,cAAA,KACES,IAAI,UACJC,KAAK,+CACLC,MAAM,gDACP,cAIHX,EAAAA,cAAA,OAAKI,UAAW,OACdJ,EAAAA,cAAA,KAAGU,KAAM,gCAAgC,yBAGtC,C,yDC4Bb,IApC2BE,IAA0C,IAAzC,OAAEC,EAAS,IAAWD,EAChD,MAAM,QAAEE,IAAYC,EAAAA,EAAAA,KAEdC,EAA2B,CAC/B,CACE,QAAS,WACTC,SAAU,EACVC,KAAM,OACNC,KAAM,GAAGL,OAIbD,EAAOzC,SAAQ,CAACgD,EAAkBC,KAChC,OAAQC,EAAMX,IAAUY,OAAOC,QAAQJ,GAEvCJ,EAAW3C,KAAK,CACd,QAAS,WACT4C,SAAUI,EAAM,EAChBH,KAAMP,EACNQ,KAAM,GAAGL,IAAUQ,KACnB,IAGJ,MAAMG,EAAe,CACnB,WAAY,oBACZ,QAAS,iBACTC,gBAAiBV,GAGnB,OACEhB,EAAAA,cAAC2B,EAAAA,EAAM,KACL3B,EAAAA,cAAA,UAAQ4B,KAAK,uBAAuBC,KAAKC,UAAUL,IAC5C,C,+CCjCb,IAdaM,IAGT/B,EAAAA,cAACgC,EAAAA,EAAW,CACV5B,UAAU,WACV6B,IAAK,8CACLC,MAAO,IACPC,QAAS,GACTC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAK,mBAAmBC,YAAAC,EAAA,O,+CCU9B,IAjBsBC,IAElBxC,EAAAA,cAAA,OAAKI,UAAU,0BACbJ,EAAAA,cAAA,OAAKI,UAAU,QACbJ,EAAAA,cAAA,OAAKI,UAAU,UACbJ,EAAAA,cAAC+B,EAAAA,EAAI,QAGT/B,EAAAA,cAAA,OAAKI,UAAU,QAAO,wBACtBJ,EAAAA,cAAA,KAAGI,UAAU,yBAAwB,6EACuCJ,EAAAA,cAAA,WAAM,yBAC1DA,EAAAA,cAAA,cAAQ,YAAiB,wB,6EC8FvD,IAvFyBtE,IACrB,MAAM,GACJiC,EAAE,MACFgD,EAAK,IACL8B,EAAG,WACHC,EAAU,mBACVC,EAAkB,kBAClBC,EAAiB,QACjBC,EAAO,MACPC,EAAK,SACLC,GACErH,GAKCsH,EAAuBC,IAAKvG,EAAAA,EAAAA,IAAkBjB,EAAAA,EAAayH,SAC5DC,EAAeH,EAAsBrF,GAErCyF,EACJD,GAAgBA,EAAavF,QAAUC,EAAAA,GAAaG,SAChDqF,EAhCcC,KACpB,MAAMC,EAAO,IAAIzH,KAAKwH,GAChBE,EAAM,IAAI1H,KAKhB,OAHuBoB,KAAKuG,IAAIF,EAAKxH,UAAYyH,EAAIzH,WACd,MAEb,EAAE,EAyBL2H,CAAad,GAEpC,OACE5C,EAAAA,cAAA,WAASI,UAAU,gBACjBJ,EAAAA,cAAC2D,EAAAA,KAAI,CAACvD,UAAU,iBAAiBwD,GAAInB,GACnCzC,EAAAA,cAAA,OAAKI,UAAU,gBACbJ,EAAAA,cAAC6D,EAAAA,EAAW,CAACzD,UAAU,QAAQ0D,MAAOhB,EAAOT,IAAK1B,KAEnD0C,EACCrD,EAAAA,cAAA,OACEI,UAAW,YACXO,MAAO,mCACR,OAID,IAGJX,EAAAA,cAAA,OAAKI,UAAU,mBACbJ,EAAAA,cAAA,UACEA,EAAAA,cAAC2D,EAAAA,KAAI,CAACC,GAAInB,GAAM9B,IAElBX,EAAAA,cAAA,OAAKI,UAAU,mBACbJ,EAAAA,cAAA,QAAMI,UAAU,oBAAoB2D,SAAUnB,GAC3CD,GAEH3C,EAAAA,cAAA,YAAM,OACNA,EAAAA,cAAA,QAAMI,UAAU,qBACbsC,EACAA,EAAa,EAAI,OAAS,MAAM,SAEjCU,EAQA,GAPApD,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,YAAM,OACNA,EAAAA,cAAA,QAAMI,UAAW,iBACd4D,EAAAA,EAAAA,IAAeb,aAAY,EAAZA,EAAcvF,WAOtCoC,EAAAA,cAAA,KAAGI,UAAU,kBAAkByC,GAC/B7C,EAAAA,cAAA,MAAII,UAAU,gBACX2C,EAASkB,KAAKC,GACblE,EAAAA,cAAA,MAAImE,IAAK1B,EAAMyB,GAAUA,OAIvB,C,sHCpDd,MAxCA,SAA4BC,EAAaC,GAGvC,MAAM,EAACC,EAAY,EAACC,IAAkB1I,EAAAA,EAAAA,WAAY,KAChD,GAAsB,oBAAXwB,OACT,OAAOgH,EAGT,IAEE,MAAMjD,EAAO/D,OAAOmH,aAAaC,QAAQL,GAEzC,OAAOhD,EAAOU,KAAK4C,MAAMtD,GAAQiD,CACnC,CAAE,MAAOM,GAGP,OADAC,QAAQC,IAAIF,GACLN,CACT,KAoBF,MAAO,CAACC,EAhBU5G,IAChB,IAEE,MAAMoH,EACJpH,aAAiBqH,SAAWrH,EAAM4G,GAAe5G,EAEnD6G,EAAeO,GAEO,oBAAXzH,QACTA,OAAOmH,aAAaQ,QAAQZ,EAAKtC,KAAKC,UAAU+C,GAEpD,CAAE,MAAOH,GAEPC,QAAQC,IAAIF,EACd,GAGJ,ECrCO,IAAK7G,EAAY,SAAZA,GAAY,OAAZA,EAAAA,EAAY,qBAAZA,EAAAA,EAAY,uBAAZA,CAAY,MAcjB,MAAMmG,EAAkBpG,IAC7B,QAAeoH,IAAXpH,EACF,MAAO,SAGT,GAAIA,GAAUC,EAAaC,QACzB,MAAO,UAGT,GAAIF,GAAUC,EAAaG,SACzB,MAAO,WAGT,MAAMiH,MAAM,2BAA2BrH,IAAS,EAOlD,MAJ2BgE,GAClBsD,EAAgC,QAAQtD,IAAQ,CAAC,E,sICvBnC,IAEjBuD,EAAe,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAAC,MAAA,KAAAC,YAAA,KA+ElB,OA/EkBC,EAAAA,EAAAA,GAAAJ,EAAAC,GAAAD,EAAAK,UACnBC,OAAA,WACE,MACEC,MAAM,YACJC,EACAC,mBAAmB,MAAEC,KAErBC,KAAKpK,MAET,OACEsE,EAAAA,cAAC+F,EAAAA,EAAM,KACL/F,EAAAA,cAACgG,EAAAA,EAAG,CACFrF,MAAM,WACNsF,SAAS,aACT7F,UAAU,qBACV8F,YAAY,0FACZC,UAAWR,EAAYS,UACvBrD,SAAU,CACR,WACA,UACA,iBACA,aACA,4BACA,4BACA,OACA,SACA,cAEFsD,KAAM,KAERrG,EAAAA,cAAA,OAAKI,UAAU,oBACbJ,EAAAA,cAAA,MAAII,UAAU,kBAAiB,YAC/BJ,EAAAA,cAAA,SAAOI,UAAU,mBACfJ,EAAAA,cAACwC,EAAAA,EAAa,MACdxC,EAAAA,cAACsG,EAAAA,EAAc,CAACC,MAAO,aACvBvG,EAAAA,cAAA,OAAKI,UAAU,kBACbJ,EAAAA,cAACwG,EAAAA,EAAa,QAGlBxG,EAAAA,cAAA,QAAMI,UAAU,iBACfyF,EAAM5B,KACHrD,IAAA,IACE6F,MAAM,WACJ/D,EACAgE,aAAa,GACX/I,EAAE,MACFgD,EAAK,KACLW,EAAI,UACJqF,EAAS,SACTC,EAAQ,QACR/D,EAAO,SACPE,EACAD,OACE+D,iBAAiB,gBAAEC,OAI1BlG,EAAA,OACCZ,EAAAA,cAAC+G,EAAAA,EAAa,CACZpJ,GAAIA,EACJwG,IAAKxG,EACLgD,MAAOA,EACP8B,IAAKnB,EACLoB,WAAYA,EACZC,mBAAoBgE,EACpB/D,kBAAmBgE,EACnB/D,QAASA,EACTC,MAAOgE,EACP/D,SAAUA,GACV,KAIR/C,EAAAA,cAAA,OAAKI,UAAU,cAEjBJ,EAAAA,cAACE,EAAAA,EAAM,MACPF,EAAAA,cAACgH,EAAAA,EAAkB,CAACnG,OAAQ,CAAC,CAAE,aAAc,eAGnD,EAACsE,CAAA,CA/EkB,CAAS8B,EAAAA,WAkF9B,W","sources":["webpack://seifrajhi.github.io/./src/components/analytics/reading-tracker.tsx","webpack://seifrajhi.github.io/./src/components/footer.tsx","webpack://seifrajhi.github.io/./src/components/seo/breadcrumbs-snippet.tsx","webpack://seifrajhi.github.io/./src/components/theme/logo.tsx","webpack://seifrajhi.github.io/./src/components/thoughts/thought-author.tsx","webpack://seifrajhi.github.io/./src/components/thoughts/thought-teaser.tsx","webpack://seifrajhi.github.io/./src/hooks/storage.tsx","webpack://seifrajhi.github.io/./src/hooks/read-repository.ts","webpack://seifrajhi.github.io/./src/pages/thoughts.js"],"sourcesContent":["import * as React from \"react\"\nimport { ReactNode, useEffect, useState } from \"react\"\nimport useReadRepository, {\n  ReadState,\n  ReadStatuses,\n} from \"../../hooks/read-repository\"\n\nexport enum ContentTypes {\n  BLOG = \"blog\",\n  THOUGHT = \"thought\",\n  LAB = \"lab\",\n}\n\ninterface Props {\n  id: string\n  contentType: ContentTypes\n  children: ReactNode\n}\n\nconst ReadingTracker = (props: Props): JSX.Element => {\n  const [contentType] = useState<string>(props.contentType)\n  const [initializedAt] = useState<number>(new Date().getTime())\n  const [readingStarted, setReadingStarted] = useState<boolean>(false)\n  const [readingStartedAt, setReadingStartedAt] = useState<number>(0)\n  const [readingEnded, setReadingEnded] = useState<boolean>(false)\n  const [readingEndedAt, setReadingEndedAt] = useState<number>(0)\n\n  const [readRepository, saveReadRepository] = useReadRepository(\n    props.contentType\n  )\n\n  const trackReadingStart = (\n    intersectedSections: IntersectionObserverEntry[]\n  ) => {\n    const section: IntersectionObserverEntry = intersectedSections\n\n    if (!section.isIntersecting || section.intersectionRatio <= 0) {\n      return\n    }\n\n    if (readingStarted) {\n      // already tracked start of reading\n      return\n    }\n\n    const startedAt: number = new Date().getTime()\n    const secondsUntilStartedReading: number = Math.round(\n      (startedAt - initializedAt) / 1000\n    )\n\n    window.requestAnimationFrame(() => {\n      if (typeof window !== \"undefined\" && typeof window.gtag !== \"undefined\") {\n        window.gtag(\"event\", \"startReading\", {\n          event_category: \"content\",\n          event_label: contentType,\n          value: secondsUntilStartedReading,\n        })\n      }\n    })\n\n    setReadingStarted(true)\n    setReadingStartedAt(startedAt)\n\n    // mark content as in progress of reading\n    const readState: ReadState = readRepository[props.id] || {\n      status: ReadStatuses.READING,\n      changed_at: new Date(),\n    }\n\n    if (readState.status == ReadStatuses.FINISHED) {\n      // content was read fully once. Don't reset that status\n      return\n    }\n\n    readState.status = ReadStatuses.READING\n    readState.changed_at = new Date()\n\n    readRepository[props.id] = readState\n    saveReadRepository(readRepository)\n  }\n\n  const trackReading = (sections: IntersectionObserverEntry[]): void => {\n    if (!readingStarted) {\n      return\n    }\n\n    if (readingEnded) {\n      return\n    }\n\n    const currentReadingSections: string[] = []\n\n    sections.forEach((section) => {\n      if (!section.isIntersecting || section.intersectionRatio <= 0) {\n        return\n      }\n\n      currentReadingSections.push(section.target.getAttribute(\"id\") as string)\n    })\n\n    if (currentReadingSections.length === 0) {\n      return\n    }\n\n    window.requestAnimationFrame(() => {\n      const spentTimeReading = new Date().getTime()\n      const secondsReading = Math.round(\n        (spentTimeReading - readingStartedAt) / 1000\n      )\n\n      if (typeof window !== \"undefined\" && typeof window.gtag !== \"undefined\") {\n        window.gtag(\"event\", \"reading\", {\n          event_category: \"content\",\n          event_label: contentType,\n          value: secondsReading,\n        })\n      }\n    })\n\n    const readState: ReadState = readRepository[props.id] || {\n      status: ReadStatuses.READING,\n      changed_at: new Date(),\n    }\n\n    if (readState.status == ReadStatuses.FINISHED) {\n      // content was read fully once. Don't reset that status\n      return\n    }\n\n    readState.status = ReadStatuses.READING\n    readState.changed_at = new Date()\n\n    readRepository[props.id] = readState\n    saveReadRepository(readRepository)\n  }\n\n  const trackReadingEnd = (\n    intersectedSections: IntersectionObserverEntry[]\n  ): void => {\n    const endSection: IntersectionObserverEntry = intersectedSections\n\n    if (!endSection.isIntersecting || endSection.intersectionRatio <= 0) {\n      return\n    }\n\n    if (readingEnded) {\n      // already tracked end of reading\n      return\n    }\n\n    const endedAt: number = new Date().getTime()\n\n    setReadingEnded(true)\n    setReadingEndedAt(endedAt)\n\n    const secondsUntilEndedReading = Math.round(\n      (readingEndedAt - readingStartedAt) / 1000\n    )\n\n    window.requestAnimationFrame(() => {\n      if (typeof window !== \"undefined\" && typeof window.gtag !== \"undefined\") {\n        window.gtag(\"event\", \"endReading\", {\n          event_category: \"content\",\n          event_label: contentType,\n          value: secondsUntilEndedReading,\n        })\n      }\n    })\n\n    const readState: ReadState = readRepository[props.id]\n\n    if (readState && readState.status == ReadStatuses.FINISHED) {\n      // content was read fully once. Don't reset that status\n      return\n    }\n\n    readRepository[props.id] = {\n      status: ReadStatuses.FINISHED,\n      changed_at: new Date(),\n    }\n    saveReadRepository(readRepository)\n  }\n\n  useEffect(() => {\n    if (typeof window === \"undefined\") {\n      return\n    }\n\n    const articleStart: HTMLElement = document.getElementById(\"intro\")\n    const articleEnd: HTMLElement = document.getElementById(\"content-end\")\n\n    const mainSections: HTMLHeadingElement[] = Array.from(\n      document.querySelectorAll(`.content h2[id]`)\n    )\n\n    const subSections: HTMLHeadingElement[] = Array.from(\n      document.querySelectorAll(\".content h3[id]\")\n    )\n    const allSections: HTMLElement[] = mainSections.concat(subSections)\n\n    const readingStartObserver = new IntersectionObserver(trackReadingStart)\n    const readingEndObserver = new IntersectionObserver(trackReadingEnd)\n    const readingObserver = new IntersectionObserver(trackReading)\n\n    allSections.forEach((section) => {\n      readingObserver.observe(section)\n    })\n\n    readingStartObserver.observe(articleStart)\n    readingEndObserver.observe(articleEnd)\n  }, [])\n\n  return (\n    <>\n      <div id=\"intro\" />\n      {props.children}\n      <div id=\"content-end\" />\n    </>\n  )\n}\n\n\nexport default ReadingTracker\n","import * as React from \"react\"\nimport SocialLinks from \"./homepage/SocialLinks\"\n\nimport \"./Footer.css\"\n\nconst Footer = (): JSX.Element => {\n  const currentDate: Date = new Date()\n\n  return (\n    <footer data-nosnippet=\"\">\n      <div className=\"footer-wrapper\">\n        <SocialLinks showPatreon={true} iconSize={\"2x\"} />\n        <div className=\"copyright\">\n          Saifeddine Rajhi © 1994 - {currentDate.getFullYear()} <br />\n          <a\n            rel=\"license\"\n            href=\"https://creativecommons.org/licenses/by/4.0/\"\n            title=\"Content is published under CC BY 4.0 license\"\n          >\n            CC BY 4.0\n          </a>\n        </div>\n        <div className={`pgp`}>\n          <a href={`https://keybase.io/saifrajhi`}>0C3B BABB 8BC1 EA2B</a>\n        </div>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","import * as React from \"react\"\nimport Helmet from \"react-helmet\"\n\nimport { useWebsiteMetadata } from \"../../hooks/website-metadata\"\n\ninterface Breadcrumb {\n  \"@type\": string\n  position: number\n  name: string\n  item: string\n}\n\ntype Crumb = Record<string, string>\n\ninterface Props {\n  crumbs: Crumb[]\n}\n\nconst BreadcrumbsSnippet = ({ crumbs = [] }: Props): JSX.Element => {\n  const { siteUrl } = useWebsiteMetadata()\n\n  const crumbItems: Breadcrumb[] = [\n    {\n      \"@type\": \"ListItem\",\n      position: 1,\n      name: \"Home\",\n      item: `${siteUrl}/`,\n    },\n  ]\n\n  crumbs.forEach((crumbItem: Crumb, idx: number) => {\n    const [[path, title]] = Object.entries(crumbItem)\n\n    crumbItems.push({\n      \"@type\": \"ListItem\",\n      position: idx + 2, // adjustment for the first home item which is in 1 position\n      name: title,\n      item: `${siteUrl}${path}`,\n    })\n  })\n\n  const schemaJSONLD = {\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    itemListElement: crumbItems,\n  }\n\n  return (\n    <Helmet>\n      <script type=\"application/ld+json\">{JSON.stringify(schemaJSONLD)}</script>\n    </Helmet>\n  )\n}\n\nexport default BreadcrumbsSnippet\n","import * as React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Logo = (): JSX.Element => {\n  // TODO: parametrize and unify this component with Avatar one\n  return (\n    <StaticImage\n      className=\"logo-img\"\n      src={`../../images/homepage/saifeddine-rajhi.jpeg`}\n      width={150}\n      quality={80}\n      formats={[\"auto\", \"webp\", \"avif\"]}\n      alt={`Saifeddine Rajhi`}\n    />\n  )\n}\n\nexport default Logo\n","import * as React from \"react\"\nimport Logo from \"../theme/logo\"\n\nimport \"./thought-author.css\"\n\nconst ThoughtAuthor = (): JSX.Element => {\n  return (\n    <div className=\"thought-author-wrapper\">\n      <div className=\"logo\">\n        <div className=\"avatar\">\n          <Logo />\n        </div>\n      </div>\n      <div className=\"name\">• Saifeddine Rajhi •</div>\n      <p className=\"thought-section-descr\">\n        My thoughts, pieces of advice and personal & professional life experience <br />\n        that will help you to <strong>overcome</strong> your life struggles\n      </p>\n    </div>\n  )\n}\n\nexport default ThoughtAuthor\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link } from \"gatsby\"\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\"\nimport useReadRepository, {\n  getStatusLabel,\n  ReadStatuses,\n} from \"../../hooks/read-repository\"\n\nimport \"./thought-teaser.css\"\nimport { ContentTypes } from \"../analytics/reading-tracker\"\n\nconst isNewArticle = (publishDate: string): boolean => {\n  const then = new Date(publishDate)\n  const now = new Date()\n\n  const msBetweenDates = Math.abs(then.getTime() - now.getTime())\n  const daysBetweenDates = msBetweenDates / (24 * 60 * 60 * 1000)\n\n  return daysBetweenDates < 30\n}\n\n\n  const ThoughtTeaser = (props) => {\n    const {\n      id,\n      title,\n      url,\n      timeToRead,\n      publishedHumanDate,\n      publishedFullDate,\n      excerpt,\n      cover,\n      keywords,\n    } = props\n\n\n\n\n  const [articleReadRepository, _] = useReadRepository(ContentTypes.THOUGHT)\n  const readingState = articleReadRepository[id]\n\n  const isFinished: boolean =\n    readingState && readingState.status == ReadStatuses.FINISHED\n  const isNew: boolean = isNewArticle(publishedFullDate)\n\n  return (\n    <article className=\"thought-item\">\n      <Link className=\"article-header\" to={url}>\n        <div className=\"cover-filter\">\n          <GatsbyImage className=\"cover\" image={cover} alt={title} />\n        </div>\n        {isNew ? (\n          <div\n            className={`new-badge`}\n            title={`Published less than a month ago`}\n          >\n            new\n          </div>\n        ) : (\n          \"\"\n        )}\n      </Link>\n      <div className=\"article-details\">\n        <h2>\n          <Link to={url}>{title}</Link>\n        </h2>\n        <div className=\"thought-details\">\n          <time className=\"thought-createdat\" dateTime={publishedFullDate}>\n            {publishedHumanDate}\n          </time>\n          <span> • </span>\n          <span className=\"thought-time2read\">\n            {timeToRead}\n            {timeToRead > 1 ? \"mins\" : \"min\"} read\n          </span>\n          {!isFinished ? (\n            <>\n              <span> • </span>\n              <span className={`unread-badge`}>\n                {getStatusLabel(readingState?.status)}\n              </span>\n            </>\n          ) : (\n            \"\"\n          )}\n        </div>\n        <p className=\"thought-digest\">{excerpt}</p>\n        <ul className=\"thought-tags\">\n          {keywords.map((keyword: string) => (\n            <li key={url + keyword}>{keyword}</li>\n          ))}\n        </ul>\n      </div>\n    </article>\n  )\n}\n\nThoughtTeaser.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  publishedFullDate: PropTypes.string.isRequired,\n  publishedHumanDate: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired,\n  cover: PropTypes.object.isRequired,\n  keywords: PropTypes.array.isRequired,\n}\n\nexport default ThoughtTeaser\n","import { useState } from \"react\"\n\nfunction useLocalStorage<T>(key: string, initialValue: T) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    if (typeof window === \"undefined\") {\n      return initialValue\n    }\n\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key)\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error)\n      return initialValue\n    }\n  })\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value\n      // Save state\n      setStoredValue(valueToStore)\n      // Save to local storage\n      if (typeof window !== \"undefined\") {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore))\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error)\n    }\n  }\n  return [storedValue, setValue] as const\n}\n\nexport default useLocalStorage\n","import useLocalStorage from \"./storage\"\nimport { ContentTypes } from \"../components/analytics/reading-tracker\"\n\nexport enum ReadStatuses {\n  READING = 1,\n  FINISHED = 2,\n}\n\nexport interface ReadState {\n  changed_at: Date\n  status: undefined | ReadStatuses\n}\n\ninterface ReadRepository {\n  [key: string]: ReadState\n}\n\nexport const getStatusLabel = (status: ReadStatuses | undefined) => {\n  if (status === undefined) {\n    return \"unread\"\n  }\n\n  if (status == ReadStatuses.READING) {\n    return \"reading\"\n  }\n\n  if (status == ReadStatuses.FINISHED) {\n    return \"finished\"\n  }\n\n  throw Error(`Unknown reading status: ${status}`)\n}\n\nconst useReadRepository = (type: ContentTypes) => {\n  return useLocalStorage<ReadRepository>(`read-${type}`, {})\n}\n\nexport default useReadRepository\n","import React, { Component } from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/theme/layout\"\nimport Seo from \"../components/seo/seo\"\nimport MainNavigation from \"../components/main-navigation\"\nimport ThoughtAuthor from \"../components/thoughts/thought-author\"\nimport ThemeSwitcher from \"../components/theme/theme-switcher\"\nimport ThoughtTeaser from \"../components/thoughts/thought-teaser\"\nimport BreadcrumbsSnippet from \"../components/seo/breadcrumbs-snippet\"\nimport Footer from \"../components/footer\"\n\nimport \"./thoughts.css\"\n\nclass ThoughtListPage extends Component {\n  render() {\n    const {\n      data: {\n        socialImage,\n        allMarkdownRemark: { edges },\n      },\n    } = this.props\n\n    return (\n      <Layout>\n        <Seo\n          title=\"Thoughts\"\n          pagePath=\"/thoughts/\"\n          className=\"thoughts-list-page\"\n          description=\"Thoughts and experience that will help you to go through your life in the very best way\"\n          imagePath={socialImage.publicURL}\n          keywords={[\n            \"thoughts\",\n            \"opinion\",\n            \"life exploring\",\n            \"psychology\",\n            \"Saifeddine Rajhi thoughts\",\n            \"Saifeddine Rajhi thoughts\",\n            \"life\",\n            \"people\",\n            \"management\",\n          ]}\n          meta={[]}\n        />\n        <div className=\"thoughts-wrapper\">\n          <h1 className=\"thoughts-title\">Thoughts</h1>\n          <aside className=\"thought-sidebar\">\n            <ThoughtAuthor />\n            <MainNavigation space={\"thoughts\"} />\n            <div className=\"theme-switcher\">\n              <ThemeSwitcher />\n            </div>\n          </aside>\n          <main className=\"thoughts-list\">\n          {edges.map(\n              ({\n                node: {\n                  timeToRead,\n                  frontmatter: {\n                    id,\n                    title,\n                    path,\n                    humanDate,\n                    fullDate,\n                    excerpt,\n                    keywords,\n                    cover: {\n                      childImageSharp: { gatsbyImageData },\n                    },\n                  },\n                },\n              }) => (\n                <ThoughtTeaser\n                  id={id}\n                  key={id}\n                  title={title}\n                  url={path}\n                  timeToRead={timeToRead}\n                  publishedHumanDate={humanDate}\n                  publishedFullDate={fullDate}\n                  excerpt={excerpt}\n                  cover={gatsbyImageData}\n                  keywords={keywords}\n                />\n              )\n            )}\n          </main>\n          <div className=\"clearfix\" />\n        </div>\n        <Footer />\n        <BreadcrumbsSnippet crumbs={[{ \"/thoughts/\": \"Thoughts\" }]} />\n      </Layout>\n    )\n  }\n}\n\nexport default ThoughtListPage\n\nexport const pageQuery = graphql`\n  query ThoughtListQuery {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: {\n        fileAbsolutePath: { regex: \"/(thoughts)/\" }\n        frontmatter: { published: { eq: true } }\n      }\n    ) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            id\n            excerpt\n            keywords\n            humanDate: date(formatString: \"MMM D, YYYY\")\n            fullDate: date(formatString: \"YYYY-MM-DD\")\n            path\n            title\n            cover {\n              childImageSharp {\n                gatsbyImageData(\n                  layout: CONSTRAINED\n                  width: 700\n                  placeholder: BLURRED\n                )\n              }\n            }\n          }\n        }\n      }\n    }\n    socialImage: file(relativePath: { eq: \"blog/seifrajhi-kcd-utrecht.jpg\" }) {\n      publicURL\n    }\n  }\n`\n"],"names":["ContentTypes","props","contentType","useState","initializedAt","Date","getTime","readingStarted","setReadingStarted","readingStartedAt","setReadingStartedAt","readingEnded","setReadingEnded","readingEndedAt","setReadingEndedAt","readRepository","saveReadRepository","useReadRepository","trackReadingStart","intersectedSections","section","isIntersecting","intersectionRatio","startedAt","secondsUntilStartedReading","Math","round","window","requestAnimationFrame","gtag","event_category","event_label","value","readState","id","status","ReadStatuses","READING","changed_at","FINISHED","trackReading","sections","currentReadingSections","forEach","push","target","getAttribute","length","spentTimeReading","secondsReading","trackReadingEnd","endSection","endedAt","secondsUntilEndedReading","useEffect","articleStart","document","getElementById","articleEnd","mainSections","Array","from","querySelectorAll","subSections","allSections","concat","readingStartObserver","IntersectionObserver","readingEndObserver","readingObserver","observe","React","children","Footer","currentDate","className","SocialLinks","showPatreon","iconSize","getFullYear","rel","href","title","_ref","crumbs","siteUrl","useWebsiteMetadata","crumbItems","position","name","item","crumbItem","idx","path","Object","entries","schemaJSONLD","itemListElement","Helmet","type","JSON","stringify","Logo","StaticImage","src","width","quality","formats","alt","__imageData","require","ThoughtAuthor","url","timeToRead","publishedHumanDate","publishedFullDate","excerpt","cover","keywords","articleReadRepository","_","THOUGHT","readingState","isFinished","isNew","publishDate","then","now","abs","isNewArticle","Link","to","GatsbyImage","image","dateTime","getStatusLabel","map","keyword","key","initialValue","storedValue","setStoredValue","localStorage","getItem","parse","error","console","log","valueToStore","Function","setItem","undefined","Error","useLocalStorage","ThoughtListPage","_Component","apply","arguments","_inheritsLoose","prototype","render","data","socialImage","allMarkdownRemark","edges","this","Layout","Seo","pagePath","description","imagePath","publicURL","meta","MainNavigation","space","ThemeSwitcher","node","frontmatter","humanDate","fullDate","childImageSharp","gatsbyImageData","ThoughtTeaser","BreadcrumbsSnippet","Component"],"sourceRoot":""}